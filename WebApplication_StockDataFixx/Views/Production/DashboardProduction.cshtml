@{
    ViewData["Title"] = "Production";
    Layout = "~/Views/Shared/_LayoutProduction.cshtml";
}

<div class="container">
    <div class="row align-items-center justify-content-between mb-3">
        <div class="col">
            <h2>Dashboard @ViewData["Title"]</h2>
        </div>
        <div class="col-auto">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Select Month
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" data-month="01">January</a>
                    <a class="dropdown-item" data-month="02">February</a>
                    <a class="dropdown-item" data-month="03">March</a>
                    <a class="dropdown-item" data-month="04">April</a>
                    <a class="dropdown-item" data-month="05">May</a>
                    <a class="dropdown-item" data-month="06">June</a>
                    <a class="dropdown-item" data-month="07">July</a>
                    <a class="dropdown-item" data-month="08">August</a>
                    <a class="dropdown-item" data-month="09">September</a>
                    <a class="dropdown-item" data-month="10">October</a>
                    <a class="dropdown-item" data-month="11">November</a>
                    <a class="dropdown-item" data-month="12">December</a>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            <div class="card chart-card">
                <div class="card-body">
                    <canvas id="chart1"></canvas>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card chart-card">
                <div class="card-body">
                    <canvas id="chart2"></canvas>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card chart-card">
                <div class="card-body">
                    <p>Total Units Distribution Production</p>
                    <canvas id="chart3"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    //$(document).ready(function () {
    Chart.debug = true;

    const chart1 = document.getElementById('chart1');
    const chart2 = document.getElementById('chart2');
    const chart3 = document.getElementById('chart3');
    let selectedMonth = "";

    // Function to fetch chart data from the server for the first two charts
    function fetchChartData() {
        fetch(`/Production/GetChartData?selectedMonth=${selectedMonth}`)
            .then(response => response.json())
            .then(data => {
                updateChart1(data);
            })
            .catch(error => {
                console.error('Error fetching chart data:', error);
            });
    }

    function fetchChart2Data() {
        fetch(`/Production/GetChart2Data?selectedMonth=${selectedMonth}`)
            .then(response => response.json())
            .then(data => {
                updateChart2(data);
            })
            .catch(error => {
                console.error('Error fetching chart data:', error);
            });
    }

    // Function to fetch chart data from the server for the third chart
    function fetchChart3Data() {
        fetch(`/Production/GetChart3Data?selectedMonth=${selectedMonth}`)
            .then(response => response.json())
            .then(data => {
                updateChart3(data);
            })
            .catch(error => {
                console.error('Error fetching chart 2 data:', error);
            });
    }



    // Function to update Chart 1 for VMI
    function updateChart1(data) {
        const ctx = chart1.getContext('2d');
        if (window.chart1Instance) {
            window.chart1Instance.destroy(); // Hancurkan objek Chart yang ada
        }

        window.chart1Instance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Total All Product'],
                datasets: [{
                    label: `Total All Product for ${getMonthName(selectedMonth)}`,
                    data: [data.TotalItems], // Menggunakan data.TotalItems
                    borderWidth: 2,
                    backgroundColor: ['#36A2EB']
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    function updateChart2(data) {
        const ctx = chart2.getContext('2d');
        if (window.chart2Instance) {
            window.chart2Instance.destroy(); // Hancurkan objek Chart yang ada
        }

        window.chart2Instance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Total ActualQty'],
                datasets: [{
                    label: `Total ActualQty for ${getMonthName(selectedMonth)}`,
                    data: [data.TotalActualQty], // Menggunakan data.TotalItems
                    borderWidth: 2,
                    backgroundColor: ['#FF6384']
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }



    // Function to update Chart 3
    function updateChart3(data) {
        const ctx = chart3.getContext('2d');
        if (window.chart3Instance) {
            window.chart3Instance.destroy(); // Hancurkan objek Chart yang ada
        }

        window.chart3Instance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['K', 'PC', 'SET', 'G', 'KG', 'M'],
                datasets: [
                    {
                        label: `Unit Distribution Production for ${getMonthName(selectedMonth)}`,
                        data: data,
                        borderWidth: 2,
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4CAF50', '#E91E63', '#2196F3'],
                    },
                ],
            },
            options: {
                cutout: '50%',
                plugins: {
                    legend: {
                        position: 'bottom',
                    },
                },
            },
        });
    }


    // Function to convert month number to name
    function getMonthName(month) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        return monthNames[parseInt(month) - 1];
    }

    fetchChartData();
    fetchChart2Data();
    fetchChart3Data();

    const dropdownButton = document.getElementById('dropdownMenuButton');
    const dropdownItems = document.querySelectorAll('.dropdown-item');

    dropdownItems.forEach(item => {
        item.addEventListener('click', function () {
            const month = this.dataset.month;
            selectedMonth = month;
            updateActiveMonth(month);
            updateCharts()
        });
    });

    function updateCharts() {
        fetchChartData();
        fetchChart2Data();
        fetchChart3Data();
    }

    function updateActiveMonth(month) {
        dropdownButton.textContent = getMonthName(month);
        dropdownItems.forEach(item => {
            item.classList.remove('active');
        });
        const activeItem = document.querySelector(`[data-month='${month}']`);
        activeItem.classList.add('active');
    }
</script>







