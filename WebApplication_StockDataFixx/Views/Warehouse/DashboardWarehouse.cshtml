@{
    ViewData["Title"] = "Warehouse";
    Layout = "~/Views/Shared/_LayoutWarehouse.cshtml";
}



<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div class="container-fluid p-0">
    <div class="d-flex justify-content-between">
        <div class="card-title" style="margin-bottom: 20px; font-weight: 800;">
            <h4>DASHBOARD STOCK TAKING WAREHOUSE</h4>
        </div>
        <div></div>
    </div>
    
    @*Baris Chart Kedua*@
    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3 header-chart">
                        <div>
                            <h5 class="card-title mb-1" style="color: #4EA652;">VMI</h5>
                            <p class="card-text">Total Per UoM</p>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Select Month
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" data-month="01">January</a>
                                <a class="dropdown-item" data-month="02">February</a>
                                <a class="dropdown-item" data-month="03">March</a>
                                <a class="dropdown-item" data-month="04">April</a>
                                <a class="dropdown-item" data-month="05">May</a>
                                <a class="dropdown-item" data-month="06">June</a>
                                <a class="dropdown-item" data-month="07">July</a>
                                <a class="dropdown-item" data-month="08">August</a>
                                <a class="dropdown-item" data-month="09">September</a>
                                <a class="dropdown-item" data-month="10">October</a>
                                <a class="dropdown-item" data-month="11">November</a>
                                <a class="dropdown-item" data-month="12">December</a>
                            </div>
                        </div>
                    </div>
                    <canvas id="chart3"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card grafik1">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3 header-chart">
                        <div>
                            <h5 class="card-title mb-1">Total Actual Qty</h5>
                            <p class="card-text">Per Month</p>
                        </div>
                        <div class="dropdown">
                            @*<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButtonYear" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Select Year
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButtonYear" id="yearDropdown">
                            <a class="dropdown-item"  data-year="2022">2022</a>
                            <a class="dropdown-item"  data-year="2023">2023</a>
                            <a class="dropdown-item"  data-year="2024">2024</a>
                            <a class="dropdown-item"  data-year="2025">2025</a>
                            <!-- Tambahkan opsi tahun lainnya sesuai kebutuhan -->
                            </div>*@
                        </div>
                    </div>
                    <canvas id="grafik1"></canvas>
                </div>
            </div>
        </div>
    </div>

    @*Baris Chart Ketiga*@
    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3 header-chart">
                        <div>
                            <h5 class="card-title mb-1" style="color: #A64E4E;">Non VMI</h5>
                            <p class="card-text">Total Per UoM</p>
                        </div>
                        <div class="dropdown">
                          
                        </div>
                    </div>
                    <canvas id="chart4"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3 header-chart">
                        <div>
                            <h5 class="card-title mb-1">Total Part Number - Stock Taking</h5>
                            <p class="card-text">Per Month</p>
                        </div>
                        <div class="dropdown">
                           
                        </div>
                    </div>
                    <canvas id="grafik2"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<div style="margin-top: 50px;"></div>



@*========================== SCRIPT INTERNAL JS ===================================*@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    Chart.debug = true;

    const chart3 = document.getElementById('chart3');
    const chart4 = document.getElementById('chart4');
    let selectedMonth = "";


    function fetchChart3Data() {
        fetch(`/Warehouse/GetChart3Data?selectedMonth=${selectedMonth}`)
            .then(response => response.json())
            .then(data => {
                updateChart3(data);
            })
            .catch(error => {
                console.error('Error fetching chart 3 data:', error);
            });
    }
    function fetchChart4Data() {
        fetch(`/Warehouse/GetChart4Data?selectedMonth=${selectedMonth}`)
            .then(response => response.json())
            .then(data => {
                updateChart4(data);
            })
            .catch(error => {
                console.error('Error fetching chart 4 data:', error);
            });
    }


    // Function to update Chart 3 (VMI)
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function updateChart3() {
        const ctx = chart3.getContext('2d');
        if (window.chart3Instance) {
            window.chart3Instance.destroy(); // Hancurkan objek Chart yang ada
        }

        // Menggunakan AJAX untuk mendapatkan data dari controller GetChart3Data
        $.ajax({
            url: '/Warehouse/GetChart3Data',
            method: 'GET',
            data: { selectedMonth: selectedMonth }, // Anda perlu mengganti ControllerName dengan nama controller yang sesuai
            success: function (data) {
                const backgroundColors = data.labels.map(() => getRandomColor());

                window.chart3Instance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.labels,
                        datasets: [
                            {
                                label: `Unit Distribution VMI for ${getMonthName(selectedMonth)}`,
                                data: data.values,
                                borderWidth: 2,
                                backgroundColor: backgroundColors,
                            },
                        ],
                    },
                    options: {
                        cutout: '50%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                            },
                        },
                    },
                });
            },
            error: function () {
                console.log('Failed to retrieve data for Chart 3');
            }
        });
    }

    function updateChart4() {
        const ctx = chart4.getContext('2d');
        if (window.chart4Instance) {
            window.chart4Instance.destroy(); // Hancurkan objek Chart yang ada
        }

        // Menggunakan AJAX untuk mendapatkan data dari controller GetChart4Data
        $.ajax({
            url: '/Warehouse/GetChart4Data',
            method: 'GET',
            data: { selectedMonth: selectedMonth }, // Anda perlu mengganti ControllerName dengan nama controller yang sesuai
            success: function (data) {
                const backgroundColors = data.labels.map(() => getRandomColor());

                window.chart4Instance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.labels,
                        datasets: [
                            {
                                label: `Unit Distribution NonVMI for ${getMonthName(selectedMonth)}`,
                                data: data.values,
                                borderWidth: 2,
                                backgroundColor: backgroundColors,
                            },
                        ],
                    },
                    options: {
                        cutout: '50%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                            },
                        },
                    },
                });
            },
            error: function () {
                console.log('Failed to retrieve data for Chart 4');
            }
        });
    }


    fetchChart3Data();
    fetchChart4Data();

    function updateCharts() {
        fetchChart3Data();
        fetchChart4Data();
    }

    function getMonthName(month) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        return monthNames[parseInt(month) - 1];
    }

    const dropdownButton = document.getElementById('dropdownMenuButton');
    const dropdownItems = document.querySelectorAll('.dropdown-item');

    dropdownItems.forEach(item => {
        item.addEventListener('click', function () {
            const month = this.dataset.month;
            selectedMonth = month;
            updateActiveMonth(month);
            updateCharts(); // Call updateCharts() here to update the charts when a new month is selected
        });
    });


    function updateActiveMonth(month) {
        dropdownButton.textContent = getMonthName(month);
        dropdownItems.forEach(item => {
            item.classList.remove('active');
        });
        const activeItem = document.querySelector(`[data-month='${month}']`);
        activeItem.classList.add('active');
    }


    //Popup Loader
    function showLoadingPopup() {
        document.getElementById("loading-popup").style.display = "flex";
    }

    // Function to hide the loading popup
    function hideLoadingPopup() {
        document.getElementById("loading-popup").style.display = "none";
    }

    // Function to check the network status
    function checkNetworkStatus() {
        var online = navigator.onLine;

        if (online) {
            // Connection is restored, hide the loading popup
            hideLoadingPopup();
        } else {
            // Connection is lost, show the loading popup
            showLoadingPopup();
        }
    }

    // Add an event listener to check network status on page load
    window.addEventListener('load', checkNetworkStatus);

    // Add an event listener to check network status when the connection changes
    window.addEventListener('online', checkNetworkStatus);
    window.addEventListener('offline', checkNetworkStatus);


    // Grafik Chart 

        // Grafik Chart 1 Total Actual Qty
        var dataBar = {
            labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            datasets: [
                {
                    label: "VMI",
                    backgroundColor: "#4EA652",
                    data: [] // Data VMI akan diisi dari hasil controller
                },
                {
                    label: "NON VMI",
                    backgroundColor: "#A50808",
                    data: [] // Data Non VMI akan diisi dari hasil controller
                },
                {
                    label: "ALL",
                    type: "line",
                    borderColor: "rgba(0, 0, 0, 1)",
                    borderWidth: 1,
                    data: [] // Data Total All Type akan diisi dari hasil controller
                }
            ]
        };

        // Opsi konfigurasi grafik
        var options = {
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        };

        // Baru using realtime for year
        // Mendapatkan tahun saat ini
        var currentYear = new Date().getFullYear();

        // Membuat URL dengan tahun saat ini
        var url1 = "/Warehouse/GetChart2Data?year=" + currentYear;

        // Melakukan permintaan AJAX dengan URL yang telah dibuat
        $.get(url1, function (data) {
            // Mengisi data grafik dengan hasil dari controller
            dataBar.datasets[0].data = data.map(item => item[0]); // Data VMI
            dataBar.datasets[1].data = data.map(item => item[1]); // Data Non VMI
            dataBar.datasets[2].data = data.map(item => item[2]); // Data Total ActualQty

            // Buat grafik dengan data yang telah diisi
            var ctxBar = document.getElementById("grafik1").getContext("2d");
            var myChartBar = new Chart(ctxBar, {
                type: "bar",
                data: dataBar,
                options: options
            });
        });

        // Lama 
        //// Ambil data dari controller
        //$.get("/Warehouse/GetChart2Data?year=2023", function (data) {
        //    // Mengisi data grafik dengan hasil dari controller
        //    dataBar.datasets[0].data = data.map(item => item[0]); // Data VMI
        //    dataBar.datasets[1].data = data.map(item => item[1]); // Data Non VMI
        //    dataBar.datasets[2].data = data.map(item => item[2]); // Data Total ActualQty

        //    // Buat grafik dengan data yang telah diisi
        //    var ctxBar = document.getElementById("grafik1").getContext("2d");
        //    var myChartBar = new Chart(ctxBar, {
        //        type: "bar",
        //        data: dataBar,
        //        options: options
        //    });
        //});


        // Grafik Chart 2 Total Count Data
        var dataBar2 = {
            labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            datasets: [
                {
                    label: "VMI",
                    backgroundColor: "#4EA652",
                    data: [] // Data VMI akan diisi dari hasil controller
                },
                {
                    label: "NON VMI",
                    backgroundColor: "#A50808",
                    data: [] // Data Non VMI akan diisi dari hasil controller
                },
                {
                    label: "ALL",
                    type: "line",
                    borderColor: "rgba(0, 0, 0, 1)",
                    borderWidth: 1,
                    data: [] // Data Total ActualQty akan diisi dari hasil controller
                }
            ]
        };

        // Opsi konfigurasi grafik
        var options = {
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        };


        var url2 = "/Warehouse/GetChartData?year=" + currentYear;

        // Melakukan permintaan AJAX dengan URL yang telah dibuat
        $.get(url2, function (data) {
            // Mengisi data grafik dengan hasil dari controller
            dataBar2.datasets[0].data = data.map(item => item[0]); // Data VMI
            dataBar2.datasets[1].data = data.map(item => item[1]); // Data Non VMI
            dataBar2.datasets[2].data = data.map(item => item[2]); // Data Total ActualQty

            // Buat grafik dengan data yang telah diisi
            var ctxBar2 = document.getElementById("grafik2").getContext("2d");
            var myChartBar2 = new Chart(ctxBar2, {
                type: "bar",
                data: dataBar2,
                options: options
            });
        });




    // Dropwon Chart
    $(document).ready(function () {   
        $(".dropdown-item").click(function () {   
            $(".dropdown-item").removeClass("active");        
            $(this).addClass("active");      
            var selectedValue = $(this).attr("value");          
            $(".btn-typeChart").text(selectedValue);
            console.log("Anda memilih: " + selectedValue);
        });
    });
    // End Dropdown Chart

    // Donut Chart Bawah
    const progressCircles = document.querySelectorAll('.progress-circle');

    // Contoh data dari sumber data (bisa diganti dengan data dari database/API)
    const dataFromDatabase = [
        { value: 40, color: '#3498db' },
        { value: 65, color: '#e74c3c' },
        { value: 20, color: '#27ae60' },
        { value: 75, color: '#27ae60' },
    ];

    function updateProgress() {
        dataFromDatabase.forEach((data, index) => {
            const circle = progressCircles[index];
            const currentValue = parseInt(circle.querySelector('.progress-label').textContent);
            const targetValue = data.value;

            if (currentValue < targetValue) {
                circle.querySelector('.progress-label').textContent = `${currentValue + 1}%`;
                circle.style.transform = `rotate(${(currentValue + 1) * 3.6}deg)`;
            }
        });
    }

    // Memulai animasi otomatis saat halaman dimuat
    setInterval(updateProgress, 50);

    // End Donut Chart Bawah
</script>

@*========================== END SCRIPT INTERNAL JS ===================================*@

@*Populoader*@
<div id="loading-popup" class="loading-popup">
    <div class="custom-loader"></div>
</div>

